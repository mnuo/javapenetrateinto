//基本信息
Classfile /home/test/Foo.class
  Last modified Jul 28, 2016; size 607 bytes
  MD5 checksum fb1c0160910e86806ee18214e020195e
  Compiled from "Foo.java"
//类的声明
public class Foo
	//class 文件格式版本号,major version 52表示jdk 8, 51表示jdk7...
  minor version: 0
  major version: 52
  flags: ACC_PUBLIC, ACC_SUPER
  //常量池 存放了所有的Field名称,方法名,方法签名,类型名,代码及calss文件中的常量值
Constant pool:
   #1 = Methodref          #7.#27         // java/lang/Object."<init>":()V
   #2 = Fieldref           #3.#28         // Foo.count:I
   #3 = Class              #29            // Foo
   #4 = Class              #30            // java/lang/Exception
   #5 = String             #31            // count overflow
   #6 = Methodref          #4.#32         // java/lang/Exception."<init>":(Ljava                                                    /lang/String;)V
   #7 = Class              #33            // java/lang/Object
   #8 = Utf8               MAX_COUNT
   #9 = Utf8               I
  #10 = Utf8               ConstantValue
  #11 = Integer            1000
  #12 = Utf8               count
  #13 = Utf8               <init>
  #14 = Utf8               ()V
  #15 = Utf8               Code
  #16 = Utf8               LineNumberTable
  #17 = Utf8               LocalVariableTable
  #18 = Utf8               this
  #19 = Utf8               LFoo;
  #20 = Utf8               bar
  #21 = Utf8               ()I
  #22 = Utf8               StackMapTable
  #23 = Utf8               Exceptions
  #24 = Utf8               <clinit>
  #25 = Utf8               SourceFile
  #26 = Utf8               Foo.java
  #27 = NameAndType        #13:#14        // "<init>":()V
  #28 = NameAndType        #12:#9         // count:I
  #29 = Utf8               Foo
  #30 = Utf8               java/lang/Exception
  #31 = Utf8               count overflow
  #32 = NameAndType        #13:#34        // "<init>":(Ljava/lang/String;)V
  #33 = Utf8               java/lang/Object
  #34 = Utf8               (Ljava/lang/String;)V
{
	//将符号输入到符号表时生成的默认构造器方法
  public Foo();
    descriptor: ()V
    flags: ACC_PUBLIC
    Code:
      stack=1, locals=1, args_size=1
         0: aload_0
         1: invokespecial #1                  // Method java/lang/Object."<init>                                                    ":()V
         4: return
      LineNumberTable:
        line 1: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       5     0  this   LFoo;

//bar 方法的元数据信息
  public int bar() throws java.lang.Exception;
    descriptor: ()I
    flags: ACC_PUBLIC

    Code:
      stack=3, locals=1, args_size=1
      //方法对用的字节码
         0: getstatic     #2                  // Field count:I
         3: iconst_1
         4: iadd
         5: dup
         6: putstatic     #2                  // Field count:I
         9: sipush        1000
        12: if_icmplt     29
        15: iconst_0
        16: putstatic     #2                  // Field count:I
        19: new           #4                  // class java/lang/Exception
        22: dup
        23: ldc           #5                  // String count overflow
        25: invokespecial #6                  // Method java/lang/Exception."<in                                                    it>":(Ljava/lang/String;)V
        28: athrow
        29: getstatic     #2                  // Field count:I
        32: ireturn

        //对应字节码的源码行号信息,可在编译的时候通过-g:none去掉行号信息,行号信息对于查找问题而言至关重要,因此最好还是保留
      LineNumberTable:
        line 5: 0
        line 7: 15
        line 8: 19
        line 10: 29
        //局部变量信息,如生成的class文件中无局部变量信息,则无法知道局部变量的名称,并且局部变量信息是和方法绑定的,接口是没有方法体的,所有ASM之类的在获取接口方法时是拿不到方法中参数的信息的
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0      33     0  this   LFoo;
       //记录有分支的情况(对应代码表中 if ..., for,while等)
      StackMapTable: number_of_entries = 1
        frame_type = 29 /* same */
        //异常处理
    Exceptions:
      throws java.lang.Exception

  static {};
    descriptor: ()V
    flags: ACC_STATIC
    Code:
      stack=1, locals=0, args_size=0
         0: iconst_0
         1: putstatic     #2                  // Field count:I
         4: return
      LineNumberTable:
        line 3: 0
}
SourceFile: "Foo.java"
